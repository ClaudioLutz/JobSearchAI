<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>1.2</storyId>
    <title>Application Queue UI</title>
    <status>Draft</status>
    <generatedAt>2025-10-16T06:59:00Z</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>Documentation/Stories/story-1.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>job applicant using JobSearchAI</asA>
    <iWant>a user-friendly application queue dashboard with visual status indicators</iWant>
    <soThat>I can efficiently review pending applications, validate completeness, and send approved applications with confidence</soThat>
    <tasks>
      <task id="1" ac="1">Create Flask Blueprint and Routes
        <subtask>Create blueprints/application_queue_routes.py file</subtask>
        <subtask>Import EmailSender and ApplicationValidator from utils</subtask>
        <subtask>Implement queue_dashboard() route function</subtask>
        <subtask>Load pending applications from filesystem</subtask>
        <subtask>Run validation on each application</subtask>
        <subtask>Implement send_application(application_id) route function</subtask>
        <subtask>Implement send_batch() route function</subtask>
        <subtask>Add error handling for all routes</subtask>
        <subtask>Test routes with curl or Postman</subtask>
      </task>
      <task id="2" ac="2">Create Queue Dashboard Template
        <subtask>Create templates/application_queue.html file</subtask>
        <subtask>Add Bootstrap 5 layout structure</subtask>
        <subtask>Implement header with count summary</subtask>
        <subtask>Create filter tabs (All/Ready/Needs Review/Sent)</subtask>
        <subtask>Build application card template with Jinja2 loops</subtask>
        <subtask>Add status badges with conditional colors</subtask>
        <subtask>Add completeness progress bar with dynamic width</subtask>
        <subtask>Include "Review" and "Send" buttons per card</subtask>
        <subtask>Add "Send All Ready" batch button</subtask>
        <subtask>Test rendering with sample data</subtask>
      </task>
      <task id="3" ac="3">Create Application Detail Modal
        <subtask>Add modal HTML structure to application_queue.html</subtask>
        <subtask>Create tabbed interface (Overview/Letter/Validation)</subtask>
        <subtask>Populate Overview tab with job details</subtask>
        <subtask>Populate Letter tab with formatted motivation letter</subtask>
        <subtask>Populate Validation tab with validation results</subtask>
        <subtask>Add "Send Now" button with confirmation</subtask>
        <subtask>Add "Close" button functionality</subtask>
        <subtask>Style modal for readability</subtask>
        <subtask>Test modal with different application states</subtask>
      </task>
      <task id="4" ac="4">Create JavaScript Interactions
        <subtask>Create static/js/queue.js file</subtask>
        <subtask>Implement modal open/close event handlers</subtask>
        <subtask>Implement AJAX POST for single send</subtask>
        <subtask>Implement AJAX POST for batch send</subtask>
        <subtask>Add confirmation dialogs (confirm before send)</subtask>
        <subtask>Implement toast notifications (success/error)</subtask>
        <subtask>Handle loading states (disable buttons, show spinners)</subtask>
        <subtask>Update UI after successful send (remove card)</subtask>
        <subtask>Add error handling for failed AJAX calls</subtask>
        <subtask>Test all interactions in browser</subtask>
      </task>
      <task id="5" ac="5">Create CSS Styling
        <subtask>Create static/css/queue_styles.css file</subtask>
        <subtask>Style application cards (shadows, spacing, borders)</subtask>
        <subtask>Style status badges (colors: green/yellow/blue)</subtask>
        <subtask>Style progress bars (colors based on score)</subtask>
        <subtask>Add responsive breakpoints (mobile/tablet/desktop)</subtask>
        <subtask>Style buttons and hover effects</subtask>
        <subtask>Style modal layout and tabs</subtask>
        <subtask>Add transitions and animations</subtask>
        <subtask>Test responsive behavior across devices</subtask>
        <subtask>Validate CSS (no errors)</subtask>
      </task>
      <task id="6" ac="6">Integration and Navigation
        <subtask>Register blueprint in dashboard.py</subtask>
        <subtask>Import application_queue_routes blueprint</subtask>
        <subtask>Add navigation link to main dashboard</subtask>
        <subtask>Create required directories (job_matches/pending, /sent, /failed)</subtask>
        <subtask>Implement load_pending_applications() helper</subtask>
        <subtask>Implement load_application(id) helper</subtask>
        <subtask>Implement move_to_sent(id, data) helper</subtask>
        <subtask>Test end-to-end flow (load queue → send → verify moved)</subtask>
        <subtask>Verify no regression in existing routes</subtask>
        <subtask>Update .gitignore for job_matches folders</subtask>
      </task>
    </tasks>
  </story>

  <acceptanceCriteria>
    <criterion id="AC-1" priority="critical">
      <title>Flask Blueprint and Routes</title>
      <description>Create Flask blueprint with routes for queue management, integrating EmailSender and ApplicationValidator from Story 1.1</description>
      <verification>
        - blueprints/application_queue_routes.py exists
        - /queue route renders dashboard with applications
        - /queue/send/&lt;id&gt; route sends single application
        - /queue/send-batch route handles batch sends
        - All routes use @login_required decorator
        - EmailSender and ApplicationValidator properly integrated
      </verification>
    </criterion>
    <criterion id="AC-2" priority="critical">
      <title>Queue Dashboard Template</title>
      <description>Create responsive dashboard template with application cards, status indicators, and filter tabs using Bootstrap 5</description>
      <verification>
        - templates/application_queue.html exists
        - Count summary displays correctly (X ready, Y review)
        - Filter tabs work (All/Ready/Needs Review/Sent)
        - Application cards display with proper styling
        - Status badges show correct colors
        - Progress bars display completeness (0-100%)
        - Action buttons present and functional
      </verification>
    </criterion>
    <criterion id="AC-3" priority="high">
      <title>Application Detail Modal</title>
      <description>Create modal component with tabbed interface showing complete application details</description>
      <verification>
        - Modal opens when "Review" clicked
        - Tabs work (Overview/Letter/Validation)
        - All application details display correctly
        - Send Now button triggers confirmation
        - Close button dismisses modal
        - Modal styled for readability
      </verification>
    </criterion>
    <criterion id="AC-4" priority="critical">
      <title>JavaScript Interactions</title>
      <description>Implement AJAX-based interactions with proper feedback and error handling</description>
      <verification>
        - static/js/queue.js exists
        - AJAX send works without page reload
        - Modal open/close functionality works
        - Confirmation dialogs appear before sends
        - Toast notifications display for success/error
        - Loading states shown during operations
        - UI updates dynamically after send
        - Error handling works for failures
      </verification>
    </criterion>
    <criterion id="AC-5" priority="high">
      <title>CSS Styling</title>
      <description>Create queue-specific styles ensuring responsive design and visual polish</description>
      <verification>
        - static/css/queue_styles.css exists
        - Cards properly styled with shadows/spacing
        - Status badges use correct colors
        - Progress bars styled with color coding
        - Responsive design works on all devices
        - Hover effects and transitions present
        - Modal styling polished
      </verification>
    </criterion>
    <criterion id="AC-6" priority="critical">
      <title>Integration and Navigation</title>
      <description>Integrate queue functionality into main application with proper file management</description>
      <verification>
        - Blueprint registered in dashboard.py
        - Navigation link added to main dashboard
        - Required directories created
        - File helpers implemented correctly
        - Applications move from pending to sent
        - No regression in existing functionality
        - .gitignore updated
      </verification>
    </criterion>
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc>
        <path>docs/tech-spec.md</path>
        <title>Technical Specification - Module 3: Queue Routes</title>
        <section>Application Queue UI</section>
        <snippet>Complete Python implementation of queue routes blueprint with queue_dashboard(), send_application(), and send_batch() functions. Includes file-based JSON storage pattern and integration with EmailSender/ApplicationValidator</snippet>
      </doc>
      <doc>
        <path>docs/ux-specification.md</path>
        <title>UX Specification - Application Queue Dashboard</title>
        <section>Queue Dashboard</section>
        <snippet>Complete UI/UX design with card-based layout, filter tabs, status badges, progress bars, modal specifications, and responsive breakpoints for mobile/tablet/desktop</snippet>
      </doc>
      <doc>
        <path>docs/tech-spec.md</path>
        <title>Technical Specification - UI Architecture</title>
        <section>Component Structure</section>
        <snippet>Page structure with header/count summary, filter tabs, application cards, detail modal with tabbed interface, and batch action buttons</snippet>
      </doc>
      <doc>
        <path>docs/epic-stories.md</path>
        <title>Epic: MVP Email Automation Pipeline</title>
        <section>Story 2: Application Queue UI</section>
        <snippet>5 story points, 6-8 hour estimate. User interface for efficient morning review workflow. Depends on Story 1.1 completion.</snippet>
      </doc>
    </docs>
    <code>
      <artifact>
        <path>utils/email_sender.py</path>
        <kind>utility</kind>
        <symbol>EmailSender</symbol>
        <lines>N/A</lines>
        <reason>DEPENDENCY from Story 1.1 - Must be imported and used for sending applications</reason>
      </artifact>
      <artifact>
        <path>utils/validation.py</path>
        <kind>utility</kind>
        <symbol>ApplicationValidator</symbol>
        <lines>N/A</lines>
        <reason>DEPENDENCY from Story 1.1 - Must be imported and used for validating applications</reason>
      </artifact>
      <artifact>
        <path>blueprints/job_matching_routes.py</path>
        <kind>blueprint</kind>
        <symbol>Existing blueprint pattern</symbol>
        <lines>N/A</lines>
        <reason>Reference for Flask blueprint structure and route patterns to follow</reason>
      </artifact>
      <artifact>
        <path>utils/decorators.py</path>
        <kind>utility</kind>
        <symbol>login_required</symbol>
        <lines>N/A</lines>
        <reason>Authentication decorator - must be used on all queue routes</reason>
      </artifact>
      <artifact>
        <path>dashboard.py</path>
        <kind>application</kind>
        <symbol>Flask app</symbol>
        <lines>N/A</lines>
        <reason>Must register new blueprint here</reason>
      </artifact>
      <artifact>
        <path>templates/index.html</path>
        <kind>template</kind>
        <symbol>Main dashboard</symbol>
        <lines>N/A</lines>
        <reason>Must add navigation link to queue dashboard</reason>
      </artifact>
      <artifact>
        <path>static/css/styles.css</path>
        <kind>stylesheet</kind>
        <symbol>Existing styles</symbol>
        <lines>N/A</lines>
        <reason>Reference for existing Bootstrap 5 usage and style patterns</reason>
      </artifact>
      <artifact>
        <path>static/js/main.js</path>
        <kind>javascript</kind>
        <symbol>Existing JS patterns</symbol>
        <lines>N/A</lines>
        <reason>Reference for existing JavaScript patterns and AJAX usage</reason>
      </artifact>
    </code>
    <dependencies>
      <python>
        <existing>
          <package name="Flask" version="2.3.3"/>
          <package name="email-validator" version="2.1.0" note="from Story 1.1"/>
        </existing>
        <stdlib>
          <module name="os" usage="File operations and directory management"/>
          <module name="json" usage="JSON file reading/writing for applications"/>
          <module name="datetime" usage="Timestamps for application tracking"/>
        </stdlib>
      </python>
      <frontend>
        <framework name="Bootstrap" version="5" usage="Already in use, leveraged for responsive layout"/>
        <library name="jQuery" version="(existing or vanilla JS)" usage="AJAX and DOM manipulation"/>
      </frontend>
    </dependencies>
  </artifacts>

  <constraints>
    <constraint priority="critical">MUST complete Story 1.1 first - EmailSender and ApplicationValidator are required dependencies</constraint>
    <constraint priority="critical">Use @login_required decorator on all routes - maintain authentication requirement</constraint>
    <constraint priority="critical">File-based JSON storage in job_matches/pending/, /sent/, /failed/ directories</constraint>
    <constraint priority="critical">AJAX-only interactions - no page reloads for send actions</constraint>
    <constraint priority="high">Follow existing Flask blueprint pattern from blueprints/job_matching_routes.py</constraint>
    <constraint priority="high">Use Bootstrap 5 (already in project) - no additional CSS frameworks</constraint>
    <constraint priority="high">Responsive design - must work on mobile, tablet, and desktop</constraint>
    <constraint priority="high">Confirmation dialogs required before all send actions</constraint>
    <constraint priority="medium">Toast notifications for all user actions (success/error)</constraint>
    <constraint priority="medium">Loading states for all async operations</constraint>
    <constraint priority="medium">Card-based layout for scanability</constraint>
    <constraint priority="medium">Color-coded status badges (green=ready, yellow=review, blue=sent)</constraint>
  </constraints>

  <interfaces>
    <interface>
      <name>Queue Dashboard Route</name>
      <kind>Flask route</kind>
      <signature>@queue_bp.route('/') @login_required def queue_dashboard()</signature>
      <path>blueprints/application_queue_routes.py</path>
      <description>Main queue dashboard rendering applications with validation</description>
      <returns>Rendered template: application_queue.html with applications list, ready_count, review_count</returns>
    </interface>
    <interface>
      <name>Send Application Route</name>
      <kind>Flask route</kind>
      <signature>@queue_bp.route('/send/&lt;application_id&gt;', methods=['POST']) @login_required def send_application(application_id)</signature>
      <path>blueprints/application_queue_routes.py</path>
      <description>Send single application via email</description>
      <returns>JSON: {success: bool, message: str, details: dict}</returns>
    </interface>
    <interface>
      <name>Send Batch Route</name>
      <kind>Flask route</kind>
      <signature>@queue_bp.route('/send-batch', methods=['POST']) @login_required def send_batch()</signature>
      <path>blueprints/application_queue_routes.py</path>
      <description>Send multiple applications in batch</description>
      <returns>JSON: {results: [{id: str, success: bool}]}</returns>
    </interface>
    <interface>
      <name>Application JSON Structure</name>
      <kind>data format</kind>
      <signature>
        {
          "id": "app_001",
          "status": "pending|sent|failed",
          "created_at": "ISO timestamp",
          "sent_at": "ISO timestamp",
          "job": {title, company, url, description},
          "recipient": {email, name},
          "motivation_letter": "string",
          "validation": {is_valid, completeness_score, validated_at}
        }
      </signature>
      <path>job_matches/pending/*.json</path>
      <description>File-based storage format for applications</description>
    </interface>
  </interfaces>

  <tests>
    <standards>Manual testing focused on UI/UX behavior. Use browser dev tools for debugging. Test on multiple browsers (Chrome, Firefox, Safari) and devices (mobile, tablet, desktop). Verify responsive behavior at all breakpoints. Test AJAX interactions with network throttling. Validate HTML/CSS with W3C validators.</standards>
    <locations>
      <location>Manual testing in browser</location>
      <location>Browser developer tools console</location>
      <location>Network tab for AJAX monitoring</location>
    </locations>
    <ideas>
      <idea ac="AC-1">Test /queue route loads all pending applications correctly</idea>
      <idea ac="AC-1">Test /queue/send/&lt;id&gt; sends application and returns success JSON</idea>
      <idea ac="AC-1">Test /queue/send-batch handles multiple IDs correctly</idea>
      <idea ac="AC-1">Test authentication required for all routes</idea>
      <idea ac="AC-2">Test dashboard displays correct counts (ready/review)</idea>
      <idea ac="AC-2">Test filter tabs update visible applications</idea>
      <idea ac="AC-2">Test status badges show correct colors</idea>
      <idea ac="AC-2">Test progress bars display correct completeness scores</idea>
      <idea ac="AC-3">Test modal opens with correct application data</idea>
      <idea ac="AC-3">Test modal tabs switch correctly</idea>
      <idea ac="AC-3">Test Send Now button triggers confirmation</idea>
      <idea ac="AC-4">Test AJAX send updates UI without reload</idea>
      <idea ac="AC-4">Test confirmation dialog appears before send</idea>
      <idea ac="AC-4">Test toast notifications display correctly</idea>
      <idea ac="AC-4">Test loading states show during operations</idea>
      <idea ac="AC-4">Test error handling displays user-friendly messages</idea>
      <idea ac="AC-5">Test responsive layout on iPhone (320px-414px)</idea>
      <idea ac="AC-5">Test responsive layout on iPad (768px-1024px)</idea>
      <idea ac="AC-5">Test responsive layout on desktop (1920px+)</idea>
      <idea ac="AC-5">Test hover effects on interactive elements</idea>
      <idea ac="AC-6">Test blueprint registration doesn't break existing routes</idea>
      <idea ac="AC-6">Test navigation link appears and works</idea>
      <idea ac="AC-6">Test directories created automatically if missing</idea>
      <idea ac="AC-6">Test application moves from pending to sent after successful send</idea>
    </ideas>
  </tests>
</story-context>
